__d(function (global, require, module, exports, _dependencyMap) {
  var Symbol = require(_dependencyMap[0], './_Symbol'),
      arrayMap = require(_dependencyMap[1], './_arrayMap'),
      isArray = require(_dependencyMap[2], './isArray'),
      isSymbol = require(_dependencyMap[3], './isSymbol');

  var INFINITY = 1 / 0;
  var symbolProto = Symbol ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : undefined,
      symbolToString = symbolProto ? symbolProto.toString : undefined;

  function baseToString(value) {
    if (typeof value == 'string') {
      return value;
    }

    if (isArray(value)) {
      return arrayMap(value, baseToString) + '';
    }

    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
  }

  module.exports = baseToString;
});